// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectRole {
  PROJECT_MANAGER
  DEVELOPPER
  UX_DESIGNER
  DEVOPS
}

enum Status {
  TO_DO
  IN_PROGRESS
  BLOCKED
  DONE
}

model User {
  id              String @id  @default(uuid())
  email           String @unique()
  password        String
  firstName       String
  lastName        String
  avatar          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  tasks           Task[]
  projects        UserProject[]
  notifications   Notification[]
  comments        Comment[]
}

model UserProject {
  user            User  @relation(fields: [userId], references: [id])
  userId          String
  project         Project @relation(fields: [projectId], references: [id])
  projectId       String
  projectRole     ProjectRole
  @@unique([userId, projectId])
}

model Project {
  id                String @id @default(uuid())
  name              String
  description       String
  members           UserProject[]
  tasks             Task[]
  status            Status
  startDate         DateTime @default(now())
  endDate           DateTime
  estimeeSpentTime  Float
 
}

model Notification {
  id          String   @id @default(uuid())
  message     String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  viewed      Boolean  @default(false)
}

model Task {
  id                String @id  @default(uuid())
  name              String
  description       String
  project           Project @relation(fields: [projectId], references: [id])
  projectId         String
  users             User[]
  startDate         DateTime  @default(now())
  endDate           DateTime
  estimeeSpentTime  Float
  advancement       Status
  comments          Comment[]
  tags              Tag[]
}

model Tag {
  id     String    @id  @default(uuid())
  label  String    @unique
  color  String
  tasks  Task[]
}

model Comment {
  id                String @id  @default(uuid())
  text              String
  user              User @relation(fields: [userId], references: [id])
  userId            String
  task              Task @relation(fields: [taskId], references: [id])
  taskId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}